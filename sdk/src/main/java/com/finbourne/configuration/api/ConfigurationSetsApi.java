/*
 * FINBOURNE ConfigurationService API
 *
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.finbourne.configuration.api;

import com.finbourne.configuration.ApiCallback;
import com.finbourne.configuration.ApiClient;
import com.finbourne.configuration.ApiException;
import com.finbourne.configuration.ApiResponse;
import com.finbourne.configuration.Configuration;
import com.finbourne.configuration.Pair;
import com.finbourne.configuration.ProgressRequestBody;
import com.finbourne.configuration.ProgressResponseBody;
import com.finbourne.configuration.extensions.ConfigurationOptions;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.finbourne.configuration.model.ConfigurationItem;
import com.finbourne.configuration.model.ConfigurationSet;
import com.finbourne.configuration.model.CreateConfigurationItem;
import com.finbourne.configuration.model.CreateConfigurationSet;
import com.finbourne.configuration.model.LusidProblemDetails;
import com.finbourne.configuration.model.LusidValidationProblemDetails;
import com.finbourne.configuration.model.PersonalAccessToken;
import com.finbourne.configuration.model.ResourceListOfConfigurationItem;
import com.finbourne.configuration.model.ResourceListOfConfigurationSet;
import com.finbourne.configuration.model.ResourceListOfConfigurationSetSummary;
import com.finbourne.configuration.model.UpdateConfigurationItem;
import com.finbourne.configuration.model.UpdateConfigurationSet;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConfigurationSetsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConfigurationSetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConfigurationSetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addConfigurationToSetCall(String type, String scope, String code, CreateConfigurationItem createConfigurationItem, String userId, final ApiCallback _callback) throws ApiException {
        return addConfigurationToSetCall(type, scope, code, createConfigurationItem, userId,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call addConfigurationToSetCall(String type, String scope, String code, CreateConfigurationItem createConfigurationItem, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConfigurationItem;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}/items"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addConfigurationToSetValidateBeforeCall(String type, String scope, String code, CreateConfigurationItem createConfigurationItem, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling addConfigurationToSet(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling addConfigurationToSet(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling addConfigurationToSet(Async)");
        }

        // verify the required parameter 'createConfigurationItem' is set
        if (createConfigurationItem == null) {
            throw new ApiException("Missing the required parameter 'createConfigurationItem' when calling addConfigurationToSet(Async)");
        }

        return addConfigurationToSetCall(type, scope, code, createConfigurationItem, userId, _callback, opts);

    }


    private ApiResponse<ConfigurationSet> addConfigurationToSetWithHttpInfo(String type, String scope, String code, CreateConfigurationItem createConfigurationItem, String userId) throws ApiException {
        okhttp3.Call localVarCall = addConfigurationToSetValidateBeforeCall(type, scope, code, createConfigurationItem, userId, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ConfigurationSet> addConfigurationToSetWithHttpInfo(String type, String scope, String code, CreateConfigurationItem createConfigurationItem, String userId, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = addConfigurationToSetValidateBeforeCall(type, scope, code, createConfigurationItem, userId, null, opts);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addConfigurationToSetAsync(String type, String scope, String code, CreateConfigurationItem createConfigurationItem, String userId, final ApiCallback<ConfigurationSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = addConfigurationToSetValidateBeforeCall(type, scope, code, createConfigurationItem, userId, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call addConfigurationToSetAsync(String type, String scope, String code, CreateConfigurationItem createConfigurationItem, String userId, final ApiCallback<ConfigurationSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = addConfigurationToSetValidateBeforeCall(type, scope, code, createConfigurationItem, userId, _callback, opts);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddConfigurationToSetRequest {
        private final String type;
        private final String scope;
        private final String code;
        private final CreateConfigurationItem createConfigurationItem;
        private String userId;

        private APIaddConfigurationToSetRequest(String type, String scope, String code, CreateConfigurationItem createConfigurationItem) {
            this.type = type;
            this.scope = scope;
            this.code = code;
            this.createConfigurationItem = createConfigurationItem;
        }

        /**
         * Set userId
         * @param userId Feature that allows Administrators to administer personal settings (but never reveal the value of secrets) of a specific user. (optional)
         * @return APIaddConfigurationToSetRequest
         */
        public APIaddConfigurationToSetRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Build call for addConfigurationToSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addConfigurationToSetCall(type, scope, code, createConfigurationItem, userId, _callback);
        }

        /**
         * Execute addConfigurationToSet request
         * @return ConfigurationSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ConfigurationSet execute() throws ApiException {
            ApiResponse<ConfigurationSet> localVarResp = addConfigurationToSetWithHttpInfo(type, scope, code, createConfigurationItem, userId);
            return localVarResp.getData();
        }

        /**
         * Execute addConfigurationToSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return ConfigurationSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ConfigurationSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ConfigurationSet> localVarResp = addConfigurationToSetWithHttpInfo(type, scope, code, createConfigurationItem, userId, opts);
            return localVarResp.getData();
        }

        /**
         * Execute addConfigurationToSet request with HTTP info returned
         * @return ApiResponse&lt;ConfigurationSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConfigurationSet> executeWithHttpInfo() throws ApiException {
            return addConfigurationToSetWithHttpInfo(type, scope, code, createConfigurationItem, userId);
        }

        /**
         * Execute addConfigurationToSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ConfigurationSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConfigurationSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return addConfigurationToSetWithHttpInfo(type, scope, code, createConfigurationItem, userId, opts);
        }

        /**
         * Execute addConfigurationToSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConfigurationSet> _callback) throws ApiException {
            return addConfigurationToSetAsync(type, scope, code, createConfigurationItem, userId, _callback);
        }

        /**
         * Execute addConfigurationToSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConfigurationSet> _callback, ConfigurationOptions opts) throws ApiException {
            return addConfigurationToSetAsync(type, scope, code, createConfigurationItem, userId, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] AddConfigurationToSet: Add a configuration item to an existing set
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param createConfigurationItem The data to create a configuration item (required)
     * @return APIaddConfigurationToSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIaddConfigurationToSetRequest addConfigurationToSet(String type, String scope, String code, CreateConfigurationItem createConfigurationItem) {
        return new APIaddConfigurationToSetRequest(type, scope, code, createConfigurationItem);
    }
    private okhttp3.Call checkAccessTokenExistsCall(final ApiCallback _callback) throws ApiException {
        return checkAccessTokenExistsCall( _callback, new ConfigurationOptions());
    }

    private okhttp3.Call checkAccessTokenExistsCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/personal/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkAccessTokenExistsValidateBeforeCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return checkAccessTokenExistsCall(_callback, opts);

    }


    private ApiResponse<Void> checkAccessTokenExistsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = checkAccessTokenExistsValidateBeforeCall(null, new ConfigurationOptions());
        return localVarApiClient.execute(localVarCall);
    }

    private ApiResponse<Void> checkAccessTokenExistsWithHttpInfo(ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = checkAccessTokenExistsValidateBeforeCall(null, opts);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call checkAccessTokenExistsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkAccessTokenExistsValidateBeforeCall(_callback, new ConfigurationOptions());
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call checkAccessTokenExistsAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = checkAccessTokenExistsValidateBeforeCall(_callback, opts);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIcheckAccessTokenExistsRequest {

        private APIcheckAccessTokenExistsRequest() {
        }

        /**
         * Build call for checkAccessTokenExists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Personal Access Token exists </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Personal Access Token does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkAccessTokenExistsCall(_callback);
        }

        /**
         * Execute checkAccessTokenExists request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Personal Access Token exists </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Personal Access Token does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            checkAccessTokenExistsWithHttpInfo();
        }

        /**
         * Execute checkAccessTokenExists request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Personal Access Token exists </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Personal Access Token does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute(ConfigurationOptions opts) throws ApiException {
            checkAccessTokenExistsWithHttpInfo(opts);
        }

        /**
         * Execute checkAccessTokenExists request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Personal Access Token exists </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Personal Access Token does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return checkAccessTokenExistsWithHttpInfo();
        }

        /**
         * Execute checkAccessTokenExists request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Personal Access Token exists </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Personal Access Token does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return checkAccessTokenExistsWithHttpInfo(opts);
        }

        /**
         * Execute checkAccessTokenExists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Personal Access Token exists </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Personal Access Token does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return checkAccessTokenExistsAsync(_callback);
        }

        /**
         * Execute checkAccessTokenExists request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The Personal Access Token exists </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> The Personal Access Token does not exist </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {
            return checkAccessTokenExistsAsync(_callback, opts);
        }
    }

    /**
     * [DEPRECATED] CheckAccessTokenExists: Check the Personal Access Token exists for the current user
     * 
     * @return APIcheckAccessTokenExistsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Personal Access Token exists </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The Personal Access Token does not exist </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcheckAccessTokenExistsRequest checkAccessTokenExists() {
        return new APIcheckAccessTokenExistsRequest();
    }
    private okhttp3.Call createConfigurationSetCall(CreateConfigurationSet createConfigurationSet, String userId, final ApiCallback _callback) throws ApiException {
        return createConfigurationSetCall(createConfigurationSet, userId,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call createConfigurationSetCall(CreateConfigurationSet createConfigurationSet, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConfigurationSet;

        // create path and map variables
        String localVarPath = "/api/sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConfigurationSetValidateBeforeCall(CreateConfigurationSet createConfigurationSet, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'createConfigurationSet' is set
        if (createConfigurationSet == null) {
            throw new ApiException("Missing the required parameter 'createConfigurationSet' when calling createConfigurationSet(Async)");
        }

        return createConfigurationSetCall(createConfigurationSet, userId, _callback, opts);

    }


    private ApiResponse<ConfigurationSet> createConfigurationSetWithHttpInfo(CreateConfigurationSet createConfigurationSet, String userId) throws ApiException {
        okhttp3.Call localVarCall = createConfigurationSetValidateBeforeCall(createConfigurationSet, userId, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ConfigurationSet> createConfigurationSetWithHttpInfo(CreateConfigurationSet createConfigurationSet, String userId, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = createConfigurationSetValidateBeforeCall(createConfigurationSet, userId, null, opts);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createConfigurationSetAsync(CreateConfigurationSet createConfigurationSet, String userId, final ApiCallback<ConfigurationSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConfigurationSetValidateBeforeCall(createConfigurationSet, userId, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call createConfigurationSetAsync(CreateConfigurationSet createConfigurationSet, String userId, final ApiCallback<ConfigurationSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = createConfigurationSetValidateBeforeCall(createConfigurationSet, userId, _callback, opts);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateConfigurationSetRequest {
        private final CreateConfigurationSet createConfigurationSet;
        private String userId;

        private APIcreateConfigurationSetRequest(CreateConfigurationSet createConfigurationSet) {
            this.createConfigurationSet = createConfigurationSet;
        }

        /**
         * Set userId
         * @param userId Feature that allows Administrators to administer personal settings (but never reveal the value of secrets) of a specific user. (optional)
         * @return APIcreateConfigurationSetRequest
         */
        public APIcreateConfigurationSetRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Build call for createConfigurationSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createConfigurationSetCall(createConfigurationSet, userId, _callback);
        }

        /**
         * Execute createConfigurationSet request
         * @return ConfigurationSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ConfigurationSet execute() throws ApiException {
            ApiResponse<ConfigurationSet> localVarResp = createConfigurationSetWithHttpInfo(createConfigurationSet, userId);
            return localVarResp.getData();
        }

        /**
         * Execute createConfigurationSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return ConfigurationSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ConfigurationSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ConfigurationSet> localVarResp = createConfigurationSetWithHttpInfo(createConfigurationSet, userId, opts);
            return localVarResp.getData();
        }

        /**
         * Execute createConfigurationSet request with HTTP info returned
         * @return ApiResponse&lt;ConfigurationSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConfigurationSet> executeWithHttpInfo() throws ApiException {
            return createConfigurationSetWithHttpInfo(createConfigurationSet, userId);
        }

        /**
         * Execute createConfigurationSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ConfigurationSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConfigurationSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return createConfigurationSetWithHttpInfo(createConfigurationSet, userId, opts);
        }

        /**
         * Execute createConfigurationSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConfigurationSet> _callback) throws ApiException {
            return createConfigurationSetAsync(createConfigurationSet, userId, _callback);
        }

        /**
         * Execute createConfigurationSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConfigurationSet> _callback, ConfigurationOptions opts) throws ApiException {
            return createConfigurationSetAsync(createConfigurationSet, userId, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] CreateConfigurationSet: Create a configuration set
     * 
     * @param createConfigurationSet The data to create a configuration set (required)
     * @return APIcreateConfigurationSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateConfigurationSetRequest createConfigurationSet(CreateConfigurationSet createConfigurationSet) {
        return new APIcreateConfigurationSetRequest(createConfigurationSet);
    }
    private okhttp3.Call deleteAccessTokenCall(final ApiCallback _callback) throws ApiException {
        return deleteAccessTokenCall( _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteAccessTokenCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/personal/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccessTokenValidateBeforeCall(final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return deleteAccessTokenCall(_callback, opts);

    }


    private ApiResponse<Void> deleteAccessTokenWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteAccessTokenValidateBeforeCall(null, new ConfigurationOptions());
        return localVarApiClient.execute(localVarCall);
    }

    private ApiResponse<Void> deleteAccessTokenWithHttpInfo(ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteAccessTokenValidateBeforeCall(null, opts);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAccessTokenAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccessTokenValidateBeforeCall(_callback, new ConfigurationOptions());
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteAccessTokenAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteAccessTokenValidateBeforeCall(_callback, opts);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAccessTokenRequest {

        private APIdeleteAccessTokenRequest() {
        }

        /**
         * Build call for deleteAccessToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAccessTokenCall(_callback);
        }

        /**
         * Execute deleteAccessToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAccessTokenWithHttpInfo();
        }

        /**
         * Execute deleteAccessToken request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute(ConfigurationOptions opts) throws ApiException {
            deleteAccessTokenWithHttpInfo(opts);
        }

        /**
         * Execute deleteAccessToken request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAccessTokenWithHttpInfo();
        }

        /**
         * Execute deleteAccessToken request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteAccessTokenWithHttpInfo(opts);
        }

        /**
         * Execute deleteAccessToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAccessTokenAsync(_callback);
        }

        /**
         * Execute deleteAccessToken request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteAccessTokenAsync(_callback, opts);
        }
    }

    /**
     * [DEPRECATED] DeleteAccessToken: Delete any stored Personal Access Token for the current user
     * 
     * @return APIdeleteAccessTokenRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAccessTokenRequest deleteAccessToken() {
        return new APIdeleteAccessTokenRequest();
    }
    private okhttp3.Call deleteConfigurationItemCall(String type, String scope, String code, String key, String userId, final ApiCallback _callback) throws ApiException {
        return deleteConfigurationItemCall(type, scope, code, key, userId,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteConfigurationItemCall(String type, String scope, String code, String key, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}/items/{key}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConfigurationItemValidateBeforeCall(String type, String scope, String code, String key, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteConfigurationItem(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteConfigurationItem(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteConfigurationItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling deleteConfigurationItem(Async)");
        }

        return deleteConfigurationItemCall(type, scope, code, key, userId, _callback, opts);

    }


    private ApiResponse<Void> deleteConfigurationItemWithHttpInfo(String type, String scope, String code, String key, String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteConfigurationItemValidateBeforeCall(type, scope, code, key, userId, null, new ConfigurationOptions());
        return localVarApiClient.execute(localVarCall);
    }

    private ApiResponse<Void> deleteConfigurationItemWithHttpInfo(String type, String scope, String code, String key, String userId, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteConfigurationItemValidateBeforeCall(type, scope, code, key, userId, null, opts);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteConfigurationItemAsync(String type, String scope, String code, String key, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConfigurationItemValidateBeforeCall(type, scope, code, key, userId, _callback, new ConfigurationOptions());
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteConfigurationItemAsync(String type, String scope, String code, String key, String userId, final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteConfigurationItemValidateBeforeCall(type, scope, code, key, userId, _callback, opts);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteConfigurationItemRequest {
        private final String type;
        private final String scope;
        private final String code;
        private final String key;
        private String userId;

        private APIdeleteConfigurationItemRequest(String type, String scope, String code, String key) {
            this.type = type;
            this.scope = scope;
            this.code = code;
            this.key = key;
        }

        /**
         * Set userId
         * @param userId Feature that allows Administrators to administer personal settings (but never reveal the value of secrets) of a specific user. (optional)
         * @return APIdeleteConfigurationItemRequest
         */
        public APIdeleteConfigurationItemRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Build call for deleteConfigurationItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteConfigurationItemCall(type, scope, code, key, userId, _callback);
        }

        /**
         * Execute deleteConfigurationItem request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteConfigurationItemWithHttpInfo(type, scope, code, key, userId);
        }

        /**
         * Execute deleteConfigurationItem request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute(ConfigurationOptions opts) throws ApiException {
            deleteConfigurationItemWithHttpInfo(type, scope, code, key, userId, opts);
        }

        /**
         * Execute deleteConfigurationItem request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteConfigurationItemWithHttpInfo(type, scope, code, key, userId);
        }

        /**
         * Execute deleteConfigurationItem request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteConfigurationItemWithHttpInfo(type, scope, code, key, userId, opts);
        }

        /**
         * Execute deleteConfigurationItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteConfigurationItemAsync(type, scope, code, key, userId, _callback);
        }

        /**
         * Execute deleteConfigurationItem request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteConfigurationItemAsync(type, scope, code, key, userId, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] DeleteConfigurationItem: Remove the specified configuration item from the specified configuration set
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @return APIdeleteConfigurationItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteConfigurationItemRequest deleteConfigurationItem(String type, String scope, String code, String key) {
        return new APIdeleteConfigurationItemRequest(type, scope, code, key);
    }
    private okhttp3.Call deleteConfigurationSetCall(String type, String scope, String code, String userId, final ApiCallback _callback) throws ApiException {
        return deleteConfigurationSetCall(type, scope, code, userId,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call deleteConfigurationSetCall(String type, String scope, String code, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConfigurationSetValidateBeforeCall(String type, String scope, String code, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteConfigurationSet(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling deleteConfigurationSet(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling deleteConfigurationSet(Async)");
        }

        return deleteConfigurationSetCall(type, scope, code, userId, _callback, opts);

    }


    private ApiResponse<Void> deleteConfigurationSetWithHttpInfo(String type, String scope, String code, String userId) throws ApiException {
        okhttp3.Call localVarCall = deleteConfigurationSetValidateBeforeCall(type, scope, code, userId, null, new ConfigurationOptions());
        return localVarApiClient.execute(localVarCall);
    }

    private ApiResponse<Void> deleteConfigurationSetWithHttpInfo(String type, String scope, String code, String userId, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = deleteConfigurationSetValidateBeforeCall(type, scope, code, userId, null, opts);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteConfigurationSetAsync(String type, String scope, String code, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConfigurationSetValidateBeforeCall(type, scope, code, userId, _callback, new ConfigurationOptions());
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    private okhttp3.Call deleteConfigurationSetAsync(String type, String scope, String code, String userId, final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = deleteConfigurationSetValidateBeforeCall(type, scope, code, userId, _callback, opts);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteConfigurationSetRequest {
        private final String type;
        private final String scope;
        private final String code;
        private String userId;

        private APIdeleteConfigurationSetRequest(String type, String scope, String code) {
            this.type = type;
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set userId
         * @param userId Feature that allows Administrators to administer personal settings (but never reveal the value of secrets) of a specific user. (optional)
         * @return APIdeleteConfigurationSetRequest
         */
        public APIdeleteConfigurationSetRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Build call for deleteConfigurationSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteConfigurationSetCall(type, scope, code, userId, _callback);
        }

        /**
         * Execute deleteConfigurationSet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteConfigurationSetWithHttpInfo(type, scope, code, userId);
        }

        /**
         * Execute deleteConfigurationSet request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public void execute(ConfigurationOptions opts) throws ApiException {
            deleteConfigurationSetWithHttpInfo(type, scope, code, userId, opts);
        }

        /**
         * Execute deleteConfigurationSet request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteConfigurationSetWithHttpInfo(type, scope, code, userId);
        }

        /**
         * Execute deleteConfigurationSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return deleteConfigurationSetWithHttpInfo(type, scope, code, userId, opts);
        }

        /**
         * Execute deleteConfigurationSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteConfigurationSetAsync(type, scope, code, userId, _callback);
        }

        /**
         * Execute deleteConfigurationSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback, ConfigurationOptions opts) throws ApiException {
            return deleteConfigurationSetAsync(type, scope, code, userId, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] DeleteConfigurationSet: Deletes a configuration set along with all their configuration items
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @return APIdeleteConfigurationSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteConfigurationSetRequest deleteConfigurationSet(String type, String scope, String code) {
        return new APIdeleteConfigurationSetRequest(type, scope, code);
    }
    private okhttp3.Call generateAccessTokenCall(String action, final ApiCallback _callback) throws ApiException {
        return generateAccessTokenCall(action,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call generateAccessTokenCall(String action, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/personal/me";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateAccessTokenValidateBeforeCall(String action, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return generateAccessTokenCall(action, _callback, opts);

    }


    private ApiResponse<PersonalAccessToken> generateAccessTokenWithHttpInfo(String action) throws ApiException {
        okhttp3.Call localVarCall = generateAccessTokenValidateBeforeCall(action, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PersonalAccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<PersonalAccessToken> generateAccessTokenWithHttpInfo(String action, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = generateAccessTokenValidateBeforeCall(action, null, opts);
        Type localVarReturnType = new TypeToken<PersonalAccessToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateAccessTokenAsync(String action, final ApiCallback<PersonalAccessToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateAccessTokenValidateBeforeCall(action, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<PersonalAccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call generateAccessTokenAsync(String action, final ApiCallback<PersonalAccessToken> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = generateAccessTokenValidateBeforeCall(action, _callback, opts);
        Type localVarReturnType = new TypeToken<PersonalAccessToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgenerateAccessTokenRequest {
        private String action;

        private APIgenerateAccessTokenRequest() {
        }

        /**
         * Set action
         * @param action action&#x3D;regenerate &#x3D; Even if an existing parameter exists, forcibly regenerate a new one (deleting the old)  action&#x3D;ensure &#x3D; If no parameter exists, create one. If one does already exist, verify that it is still valid (call a service?), and if so, return it. If it is not still valid, then regenerate a new one.  action&#x3D;default &#x3D; If a parameter exists, return it. If not then create one. If this parameter is not provided, this is the default behaviour. (optional)
         * @return APIgenerateAccessTokenRequest
         */
        public APIgenerateAccessTokenRequest action(String action) {
            this.action = action;
            return this;
        }

        /**
         * Build call for generateAccessToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateAccessTokenCall(action, _callback);
        }

        /**
         * Execute generateAccessToken request
         * @return PersonalAccessToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PersonalAccessToken execute() throws ApiException {
            ApiResponse<PersonalAccessToken> localVarResp = generateAccessTokenWithHttpInfo(action);
            return localVarResp.getData();
        }

        /**
         * Execute generateAccessToken request. Use any specified configuration options to override any other configuration for this request only.
         * @return PersonalAccessToken
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public PersonalAccessToken execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<PersonalAccessToken> localVarResp = generateAccessTokenWithHttpInfo(action, opts);
            return localVarResp.getData();
        }

        /**
         * Execute generateAccessToken request with HTTP info returned
         * @return ApiResponse&lt;PersonalAccessToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonalAccessToken> executeWithHttpInfo() throws ApiException {
            return generateAccessTokenWithHttpInfo(action);
        }

        /**
         * Execute generateAccessToken request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;PersonalAccessToken&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PersonalAccessToken> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return generateAccessTokenWithHttpInfo(action, opts);
        }

        /**
         * Execute generateAccessToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonalAccessToken> _callback) throws ApiException {
            return generateAccessTokenAsync(action, _callback);
        }

        /**
         * Execute generateAccessToken request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PersonalAccessToken> _callback, ConfigurationOptions opts) throws ApiException {
            return generateAccessTokenAsync(action, _callback, opts);
        }
    }

    /**
     * [DEPRECATED] GenerateAccessToken: Generate a Personal Access Token for the current user and stores it in the me token
     * 
     * @return APIgenerateAccessTokenRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgenerateAccessTokenRequest generateAccessToken() {
        return new APIgenerateAccessTokenRequest();
    }
    private okhttp3.Call getConfigurationItemCall(String type, String scope, String code, String key, Boolean reveal, String userId, final ApiCallback _callback) throws ApiException {
        return getConfigurationItemCall(type, scope, code, key, reveal, userId,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getConfigurationItemCall(String type, String scope, String code, String key, Boolean reveal, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}/items/{key}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reveal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reveal", reveal));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationItemValidateBeforeCall(String type, String scope, String code, String key, Boolean reveal, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getConfigurationItem(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getConfigurationItem(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getConfigurationItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getConfigurationItem(Async)");
        }

        return getConfigurationItemCall(type, scope, code, key, reveal, userId, _callback, opts);

    }


    private ApiResponse<ConfigurationItem> getConfigurationItemWithHttpInfo(String type, String scope, String code, String key, Boolean reveal, String userId) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationItemValidateBeforeCall(type, scope, code, key, reveal, userId, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ConfigurationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ConfigurationItem> getConfigurationItemWithHttpInfo(String type, String scope, String code, String key, Boolean reveal, String userId, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationItemValidateBeforeCall(type, scope, code, key, reveal, userId, null, opts);
        Type localVarReturnType = new TypeToken<ConfigurationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConfigurationItemAsync(String type, String scope, String code, String key, Boolean reveal, String userId, final ApiCallback<ConfigurationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationItemValidateBeforeCall(type, scope, code, key, reveal, userId, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ConfigurationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getConfigurationItemAsync(String type, String scope, String code, String key, Boolean reveal, String userId, final ApiCallback<ConfigurationItem> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationItemValidateBeforeCall(type, scope, code, key, reveal, userId, _callback, opts);
        Type localVarReturnType = new TypeToken<ConfigurationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConfigurationItemRequest {
        private final String type;
        private final String scope;
        private final String code;
        private final String key;
        private Boolean reveal;
        private String userId;

        private APIgetConfigurationItemRequest(String type, String scope, String code, String key) {
            this.type = type;
            this.scope = scope;
            this.code = code;
            this.key = key;
        }

        /**
         * Set reveal
         * @param reveal Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)
         * @return APIgetConfigurationItemRequest
         */
        public APIgetConfigurationItemRequest reveal(Boolean reveal) {
            this.reveal = reveal;
            return this;
        }

        /**
         * Set userId
         * @param userId Feature that allows Administrators to administer personal settings (but never reveal the value of secrets) of a specific user. (optional)
         * @return APIgetConfigurationItemRequest
         */
        public APIgetConfigurationItemRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Build call for getConfigurationItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConfigurationItemCall(type, scope, code, key, reveal, userId, _callback);
        }

        /**
         * Execute getConfigurationItem request
         * @return ConfigurationItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ConfigurationItem execute() throws ApiException {
            ApiResponse<ConfigurationItem> localVarResp = getConfigurationItemWithHttpInfo(type, scope, code, key, reveal, userId);
            return localVarResp.getData();
        }

        /**
         * Execute getConfigurationItem request. Use any specified configuration options to override any other configuration for this request only.
         * @return ConfigurationItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ConfigurationItem execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ConfigurationItem> localVarResp = getConfigurationItemWithHttpInfo(type, scope, code, key, reveal, userId, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getConfigurationItem request with HTTP info returned
         * @return ApiResponse&lt;ConfigurationItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConfigurationItem> executeWithHttpInfo() throws ApiException {
            return getConfigurationItemWithHttpInfo(type, scope, code, key, reveal, userId);
        }

        /**
         * Execute getConfigurationItem request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ConfigurationItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConfigurationItem> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getConfigurationItemWithHttpInfo(type, scope, code, key, reveal, userId, opts);
        }

        /**
         * Execute getConfigurationItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConfigurationItem> _callback) throws ApiException {
            return getConfigurationItemAsync(type, scope, code, key, reveal, userId, _callback);
        }

        /**
         * Execute getConfigurationItem request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConfigurationItem> _callback, ConfigurationOptions opts) throws ApiException {
            return getConfigurationItemAsync(type, scope, code, key, reveal, userId, _callback, opts);
        }
    }

    /**
     * GetConfigurationItem: Get the specific configuration item within an existing set
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @return APIgetConfigurationItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConfigurationItemRequest getConfigurationItem(String type, String scope, String code, String key) {
        return new APIgetConfigurationItemRequest(type, scope, code, key);
    }
    private okhttp3.Call getConfigurationSetCall(String type, String scope, String code, Boolean reveal, String userId, final ApiCallback _callback) throws ApiException {
        return getConfigurationSetCall(type, scope, code, reveal, userId,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getConfigurationSetCall(String type, String scope, String code, Boolean reveal, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reveal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reveal", reveal));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationSetValidateBeforeCall(String type, String scope, String code, Boolean reveal, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getConfigurationSet(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling getConfigurationSet(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getConfigurationSet(Async)");
        }

        return getConfigurationSetCall(type, scope, code, reveal, userId, _callback, opts);

    }


    private ApiResponse<ConfigurationSet> getConfigurationSetWithHttpInfo(String type, String scope, String code, Boolean reveal, String userId) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationSetValidateBeforeCall(type, scope, code, reveal, userId, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ConfigurationSet> getConfigurationSetWithHttpInfo(String type, String scope, String code, Boolean reveal, String userId, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationSetValidateBeforeCall(type, scope, code, reveal, userId, null, opts);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConfigurationSetAsync(String type, String scope, String code, Boolean reveal, String userId, final ApiCallback<ConfigurationSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationSetValidateBeforeCall(type, scope, code, reveal, userId, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getConfigurationSetAsync(String type, String scope, String code, Boolean reveal, String userId, final ApiCallback<ConfigurationSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationSetValidateBeforeCall(type, scope, code, reveal, userId, _callback, opts);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConfigurationSetRequest {
        private final String type;
        private final String scope;
        private final String code;
        private Boolean reveal;
        private String userId;

        private APIgetConfigurationSetRequest(String type, String scope, String code) {
            this.type = type;
            this.scope = scope;
            this.code = code;
        }

        /**
         * Set reveal
         * @param reveal Whether to reveal the secrets. This is only available when the userId query setting has not been specified. (optional)
         * @return APIgetConfigurationSetRequest
         */
        public APIgetConfigurationSetRequest reveal(Boolean reveal) {
            this.reveal = reveal;
            return this;
        }

        /**
         * Set userId
         * @param userId Feature that allows Administrators to administer personal settings (but never reveal the value of secrets) of a specific user. (optional)
         * @return APIgetConfigurationSetRequest
         */
        public APIgetConfigurationSetRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Build call for getConfigurationSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConfigurationSetCall(type, scope, code, reveal, userId, _callback);
        }

        /**
         * Execute getConfigurationSet request
         * @return ConfigurationSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ConfigurationSet execute() throws ApiException {
            ApiResponse<ConfigurationSet> localVarResp = getConfigurationSetWithHttpInfo(type, scope, code, reveal, userId);
            return localVarResp.getData();
        }

        /**
         * Execute getConfigurationSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return ConfigurationSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ConfigurationSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ConfigurationSet> localVarResp = getConfigurationSetWithHttpInfo(type, scope, code, reveal, userId, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getConfigurationSet request with HTTP info returned
         * @return ApiResponse&lt;ConfigurationSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConfigurationSet> executeWithHttpInfo() throws ApiException {
            return getConfigurationSetWithHttpInfo(type, scope, code, reveal, userId);
        }

        /**
         * Execute getConfigurationSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ConfigurationSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConfigurationSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getConfigurationSetWithHttpInfo(type, scope, code, reveal, userId, opts);
        }

        /**
         * Execute getConfigurationSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConfigurationSet> _callback) throws ApiException {
            return getConfigurationSetAsync(type, scope, code, reveal, userId, _callback);
        }

        /**
         * Execute getConfigurationSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConfigurationSet> _callback, ConfigurationOptions opts) throws ApiException {
            return getConfigurationSetAsync(type, scope, code, reveal, userId, _callback, opts);
        }
    }

    /**
     * GetConfigurationSet: Get a configuration set, including all the associated metadata. By default secrets will not be revealed
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @return APIgetConfigurationSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConfigurationSetRequest getConfigurationSet(String type, String scope, String code) {
        return new APIgetConfigurationSetRequest(type, scope, code);
    }
    private okhttp3.Call getSystemConfigurationItemsCall(String code, String key, Boolean reveal, final ApiCallback _callback) throws ApiException {
        return getSystemConfigurationItemsCall(code, key, reveal,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getSystemConfigurationItemsCall(String code, String key, Boolean reveal, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/system/{code}/items/{key}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reveal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reveal", reveal));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSystemConfigurationItemsValidateBeforeCall(String code, String key, Boolean reveal, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getSystemConfigurationItems(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getSystemConfigurationItems(Async)");
        }

        return getSystemConfigurationItemsCall(code, key, reveal, _callback, opts);

    }


    private ApiResponse<ResourceListOfConfigurationItem> getSystemConfigurationItemsWithHttpInfo(String code, String key, Boolean reveal) throws ApiException {
        okhttp3.Call localVarCall = getSystemConfigurationItemsValidateBeforeCall(code, key, reveal, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfConfigurationItem> getSystemConfigurationItemsWithHttpInfo(String code, String key, Boolean reveal, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getSystemConfigurationItemsValidateBeforeCall(code, key, reveal, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSystemConfigurationItemsAsync(String code, String key, Boolean reveal, final ApiCallback<ResourceListOfConfigurationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSystemConfigurationItemsValidateBeforeCall(code, key, reveal, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getSystemConfigurationItemsAsync(String code, String key, Boolean reveal, final ApiCallback<ResourceListOfConfigurationItem> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getSystemConfigurationItemsValidateBeforeCall(code, key, reveal, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSystemConfigurationItemsRequest {
        private final String code;
        private final String key;
        private Boolean reveal;

        private APIgetSystemConfigurationItemsRequest(String code, String key) {
            this.code = code;
            this.key = key;
        }

        /**
         * Set reveal
         * @param reveal Whether to reveal the secrets (optional)
         * @return APIgetSystemConfigurationItemsRequest
         */
        public APIgetSystemConfigurationItemsRequest reveal(Boolean reveal) {
            this.reveal = reveal;
            return this;
        }

        /**
         * Build call for getSystemConfigurationItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSystemConfigurationItemsCall(code, key, reveal, _callback);
        }

        /**
         * Execute getSystemConfigurationItems request
         * @return ResourceListOfConfigurationItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfConfigurationItem execute() throws ApiException {
            ApiResponse<ResourceListOfConfigurationItem> localVarResp = getSystemConfigurationItemsWithHttpInfo(code, key, reveal);
            return localVarResp.getData();
        }

        /**
         * Execute getSystemConfigurationItems request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfConfigurationItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfConfigurationItem execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfConfigurationItem> localVarResp = getSystemConfigurationItemsWithHttpInfo(code, key, reveal, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getSystemConfigurationItems request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfConfigurationItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfConfigurationItem> executeWithHttpInfo() throws ApiException {
            return getSystemConfigurationItemsWithHttpInfo(code, key, reveal);
        }

        /**
         * Execute getSystemConfigurationItems request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfConfigurationItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfConfigurationItem> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getSystemConfigurationItemsWithHttpInfo(code, key, reveal, opts);
        }

        /**
         * Execute getSystemConfigurationItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfConfigurationItem> _callback) throws ApiException {
            return getSystemConfigurationItemsAsync(code, key, reveal, _callback);
        }

        /**
         * Execute getSystemConfigurationItems request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfConfigurationItem> _callback, ConfigurationOptions opts) throws ApiException {
            return getSystemConfigurationItemsAsync(code, key, reveal, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] GetSystemConfigurationItems: Get the specific system configuration items within a system set  All users have access to this endpoint
     * 
     * @param code The code that identifies a system configuration set (required)
     * @param key The key that identifies a system configuration item (required)
     * @return APIgetSystemConfigurationItemsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No system configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSystemConfigurationItemsRequest getSystemConfigurationItems(String code, String key) {
        return new APIgetSystemConfigurationItemsRequest(code, key);
    }
    private okhttp3.Call getSystemConfigurationSetsCall(String code, Boolean reveal, final ApiCallback _callback) throws ApiException {
        return getSystemConfigurationSetsCall(code, reveal,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call getSystemConfigurationSetsCall(String code, Boolean reveal, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets/system/{code}"
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reveal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reveal", reveal));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSystemConfigurationSetsValidateBeforeCall(String code, Boolean reveal, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getSystemConfigurationSets(Async)");
        }

        return getSystemConfigurationSetsCall(code, reveal, _callback, opts);

    }


    private ApiResponse<ResourceListOfConfigurationSet> getSystemConfigurationSetsWithHttpInfo(String code, Boolean reveal) throws ApiException {
        okhttp3.Call localVarCall = getSystemConfigurationSetsValidateBeforeCall(code, reveal, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfConfigurationSet> getSystemConfigurationSetsWithHttpInfo(String code, Boolean reveal, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = getSystemConfigurationSetsValidateBeforeCall(code, reveal, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSystemConfigurationSetsAsync(String code, Boolean reveal, final ApiCallback<ResourceListOfConfigurationSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSystemConfigurationSetsValidateBeforeCall(code, reveal, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call getSystemConfigurationSetsAsync(String code, Boolean reveal, final ApiCallback<ResourceListOfConfigurationSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = getSystemConfigurationSetsValidateBeforeCall(code, reveal, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSystemConfigurationSetsRequest {
        private final String code;
        private Boolean reveal;

        private APIgetSystemConfigurationSetsRequest(String code) {
            this.code = code;
        }

        /**
         * Set reveal
         * @param reveal Whether to reveal the secrets (optional)
         * @return APIgetSystemConfigurationSetsRequest
         */
        public APIgetSystemConfigurationSetsRequest reveal(Boolean reveal) {
            this.reveal = reveal;
            return this;
        }

        /**
         * Build call for getSystemConfigurationSets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSystemConfigurationSetsCall(code, reveal, _callback);
        }

        /**
         * Execute getSystemConfigurationSets request
         * @return ResourceListOfConfigurationSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfConfigurationSet execute() throws ApiException {
            ApiResponse<ResourceListOfConfigurationSet> localVarResp = getSystemConfigurationSetsWithHttpInfo(code, reveal);
            return localVarResp.getData();
        }

        /**
         * Execute getSystemConfigurationSets request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfConfigurationSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfConfigurationSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfConfigurationSet> localVarResp = getSystemConfigurationSetsWithHttpInfo(code, reveal, opts);
            return localVarResp.getData();
        }

        /**
         * Execute getSystemConfigurationSets request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfConfigurationSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfConfigurationSet> executeWithHttpInfo() throws ApiException {
            return getSystemConfigurationSetsWithHttpInfo(code, reveal);
        }

        /**
         * Execute getSystemConfigurationSets request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfConfigurationSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfConfigurationSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return getSystemConfigurationSetsWithHttpInfo(code, reveal, opts);
        }

        /**
         * Execute getSystemConfigurationSets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfConfigurationSet> _callback) throws ApiException {
            return getSystemConfigurationSetsAsync(code, reveal, _callback);
        }

        /**
         * Execute getSystemConfigurationSets request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No system configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfConfigurationSet> _callback, ConfigurationOptions opts) throws ApiException {
            return getSystemConfigurationSetsAsync(code, reveal, _callback, opts);
        }
    }

    /**
     * GetSystemConfigurationSets: Get the specified system configuration sets, including all their associated metadata. By default secrets will not be revealed  All users have access to this endpoint
     * 
     * @param code The code that identifies a system configuration set (required)
     * @return APIgetSystemConfigurationSetsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No system configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSystemConfigurationSetsRequest getSystemConfigurationSets(String code) {
        return new APIgetSystemConfigurationSetsRequest(code);
    }
    private okhttp3.Call listConfigurationSetsCall(String type, String userId, final ApiCallback _callback) throws ApiException {
        return listConfigurationSetsCall(type, userId,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call listConfigurationSetsCall(String type, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/sets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listConfigurationSetsValidateBeforeCall(String type, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        return listConfigurationSetsCall(type, userId, _callback, opts);

    }


    private ApiResponse<ResourceListOfConfigurationSetSummary> listConfigurationSetsWithHttpInfo(String type, String userId) throws ApiException {
        okhttp3.Call localVarCall = listConfigurationSetsValidateBeforeCall(type, userId, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationSetSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ResourceListOfConfigurationSetSummary> listConfigurationSetsWithHttpInfo(String type, String userId, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = listConfigurationSetsValidateBeforeCall(type, userId, null, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationSetSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listConfigurationSetsAsync(String type, String userId, final ApiCallback<ResourceListOfConfigurationSetSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = listConfigurationSetsValidateBeforeCall(type, userId, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationSetSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call listConfigurationSetsAsync(String type, String userId, final ApiCallback<ResourceListOfConfigurationSetSummary> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = listConfigurationSetsValidateBeforeCall(type, userId, _callback, opts);
        Type localVarReturnType = new TypeToken<ResourceListOfConfigurationSetSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistConfigurationSetsRequest {
        private String type;
        private String userId;

        private APIlistConfigurationSetsRequest() {
        }

        /**
         * Set type
         * @param type Whether the configuration set is Personal or Shared (optional)
         * @return APIlistConfigurationSetsRequest
         */
        public APIlistConfigurationSetsRequest type(String type) {
            this.type = type;
            return this;
        }

        /**
         * Set userId
         * @param userId Feature that allows Administrators to administer personal settings (but never reveal the value of secrets) of a specific user. (optional)
         * @return APIlistConfigurationSetsRequest
         */
        public APIlistConfigurationSetsRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Build call for listConfigurationSets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listConfigurationSetsCall(type, userId, _callback);
        }

        /**
         * Execute listConfigurationSets request
         * @return ResourceListOfConfigurationSetSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfConfigurationSetSummary execute() throws ApiException {
            ApiResponse<ResourceListOfConfigurationSetSummary> localVarResp = listConfigurationSetsWithHttpInfo(type, userId);
            return localVarResp.getData();
        }

        /**
         * Execute listConfigurationSets request. Use any specified configuration options to override any other configuration for this request only.
         * @return ResourceListOfConfigurationSetSummary
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ResourceListOfConfigurationSetSummary execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ResourceListOfConfigurationSetSummary> localVarResp = listConfigurationSetsWithHttpInfo(type, userId, opts);
            return localVarResp.getData();
        }

        /**
         * Execute listConfigurationSets request with HTTP info returned
         * @return ApiResponse&lt;ResourceListOfConfigurationSetSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfConfigurationSetSummary> executeWithHttpInfo() throws ApiException {
            return listConfigurationSetsWithHttpInfo(type, userId);
        }

        /**
         * Execute listConfigurationSets request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ResourceListOfConfigurationSetSummary&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResourceListOfConfigurationSetSummary> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return listConfigurationSetsWithHttpInfo(type, userId, opts);
        }

        /**
         * Execute listConfigurationSets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfConfigurationSetSummary> _callback) throws ApiException {
            return listConfigurationSetsAsync(type, userId, _callback);
        }

        /**
         * Execute listConfigurationSets request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResourceListOfConfigurationSetSummary> _callback, ConfigurationOptions opts) throws ApiException {
            return listConfigurationSetsAsync(type, userId, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] ListConfigurationSets: List all configuration sets summaries (I.e. list of scope/code combinations available)
     * 
     * @return APIlistConfigurationSetsRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIlistConfigurationSetsRequest listConfigurationSets() {
        return new APIlistConfigurationSetsRequest();
    }
    private okhttp3.Call updateConfigurationItemCall(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem, String userId, final ApiCallback _callback) throws ApiException {
        return updateConfigurationItemCall(type, scope, code, key, updateConfigurationItem, userId,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateConfigurationItemCall(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateConfigurationItem;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}/items/{key}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigurationItemValidateBeforeCall(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateConfigurationItem(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateConfigurationItem(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateConfigurationItem(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateConfigurationItem(Async)");
        }

        // verify the required parameter 'updateConfigurationItem' is set
        if (updateConfigurationItem == null) {
            throw new ApiException("Missing the required parameter 'updateConfigurationItem' when calling updateConfigurationItem(Async)");
        }

        return updateConfigurationItemCall(type, scope, code, key, updateConfigurationItem, userId, _callback, opts);

    }


    private ApiResponse<ConfigurationItem> updateConfigurationItemWithHttpInfo(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem, String userId) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationItemValidateBeforeCall(type, scope, code, key, updateConfigurationItem, userId, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ConfigurationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ConfigurationItem> updateConfigurationItemWithHttpInfo(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem, String userId, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationItemValidateBeforeCall(type, scope, code, key, updateConfigurationItem, userId, null, opts);
        Type localVarReturnType = new TypeToken<ConfigurationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateConfigurationItemAsync(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem, String userId, final ApiCallback<ConfigurationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConfigurationItemValidateBeforeCall(type, scope, code, key, updateConfigurationItem, userId, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ConfigurationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateConfigurationItemAsync(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem, String userId, final ApiCallback<ConfigurationItem> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateConfigurationItemValidateBeforeCall(type, scope, code, key, updateConfigurationItem, userId, _callback, opts);
        Type localVarReturnType = new TypeToken<ConfigurationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateConfigurationItemRequest {
        private final String type;
        private final String scope;
        private final String code;
        private final String key;
        private final UpdateConfigurationItem updateConfigurationItem;
        private String userId;

        private APIupdateConfigurationItemRequest(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem) {
            this.type = type;
            this.scope = scope;
            this.code = code;
            this.key = key;
            this.updateConfigurationItem = updateConfigurationItem;
        }

        /**
         * Set userId
         * @param userId Feature that allows Administrators to administer personal settings (but never reveal the value of secrets) of a specific user. (optional)
         * @return APIupdateConfigurationItemRequest
         */
        public APIupdateConfigurationItemRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Build call for updateConfigurationItem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateConfigurationItemCall(type, scope, code, key, updateConfigurationItem, userId, _callback);
        }

        /**
         * Execute updateConfigurationItem request
         * @return ConfigurationItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ConfigurationItem execute() throws ApiException {
            ApiResponse<ConfigurationItem> localVarResp = updateConfigurationItemWithHttpInfo(type, scope, code, key, updateConfigurationItem, userId);
            return localVarResp.getData();
        }

        /**
         * Execute updateConfigurationItem request. Use any specified configuration options to override any other configuration for this request only.
         * @return ConfigurationItem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ConfigurationItem execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ConfigurationItem> localVarResp = updateConfigurationItemWithHttpInfo(type, scope, code, key, updateConfigurationItem, userId, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateConfigurationItem request with HTTP info returned
         * @return ApiResponse&lt;ConfigurationItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConfigurationItem> executeWithHttpInfo() throws ApiException {
            return updateConfigurationItemWithHttpInfo(type, scope, code, key, updateConfigurationItem, userId);
        }

        /**
         * Execute updateConfigurationItem request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ConfigurationItem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConfigurationItem> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateConfigurationItemWithHttpInfo(type, scope, code, key, updateConfigurationItem, userId, opts);
        }

        /**
         * Execute updateConfigurationItem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConfigurationItem> _callback) throws ApiException {
            return updateConfigurationItemAsync(type, scope, code, key, updateConfigurationItem, userId, _callback);
        }

        /**
         * Execute updateConfigurationItem request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConfigurationItem> _callback, ConfigurationOptions opts) throws ApiException {
            return updateConfigurationItemAsync(type, scope, code, key, updateConfigurationItem, userId, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpdateConfigurationItem: Update a configuration item&#39;s value and/or description
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param key The key that identifies a configuration item (required)
     * @param updateConfigurationItem The data to update a configuration item (required)
     * @return APIupdateConfigurationItemRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration item exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateConfigurationItemRequest updateConfigurationItem(String type, String scope, String code, String key, UpdateConfigurationItem updateConfigurationItem) {
        return new APIupdateConfigurationItemRequest(type, scope, code, key, updateConfigurationItem);
    }
    private okhttp3.Call updateConfigurationSetCall(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet, String userId, final ApiCallback _callback) throws ApiException {
        return updateConfigurationSetCall(type, scope, code, updateConfigurationSet, userId,  _callback, new ConfigurationOptions());
    }

    private okhttp3.Call updateConfigurationSetCall(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateConfigurationSet;

        // create path and map variables
        String localVarPath = "/api/sets/{type}/{scope}/{code}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()))
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        final String[] localVarAccepts = {
            "text/plain",
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json-patch+json",
            "application/json",
            "text/json",
            "application/*+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback, opts);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConfigurationSetValidateBeforeCall(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet, String userId, final ApiCallback _callback, ConfigurationOptions opts) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling updateConfigurationSet(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling updateConfigurationSet(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateConfigurationSet(Async)");
        }

        // verify the required parameter 'updateConfigurationSet' is set
        if (updateConfigurationSet == null) {
            throw new ApiException("Missing the required parameter 'updateConfigurationSet' when calling updateConfigurationSet(Async)");
        }

        return updateConfigurationSetCall(type, scope, code, updateConfigurationSet, userId, _callback, opts);

    }


    private ApiResponse<ConfigurationSet> updateConfigurationSetWithHttpInfo(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet, String userId) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationSetValidateBeforeCall(type, scope, code, updateConfigurationSet, userId, null, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private ApiResponse<ConfigurationSet> updateConfigurationSetWithHttpInfo(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet, String userId, ConfigurationOptions opts) throws ApiException {
        okhttp3.Call localVarCall = updateConfigurationSetValidateBeforeCall(type, scope, code, updateConfigurationSet, userId, null, opts);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateConfigurationSetAsync(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet, String userId, final ApiCallback<ConfigurationSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConfigurationSetValidateBeforeCall(type, scope, code, updateConfigurationSet, userId, _callback, new ConfigurationOptions());
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    private okhttp3.Call updateConfigurationSetAsync(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet, String userId, final ApiCallback<ConfigurationSet> _callback, ConfigurationOptions opts) throws ApiException {

        okhttp3.Call localVarCall = updateConfigurationSetValidateBeforeCall(type, scope, code, updateConfigurationSet, userId, _callback, opts);
        Type localVarReturnType = new TypeToken<ConfigurationSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateConfigurationSetRequest {
        private final String type;
        private final String scope;
        private final String code;
        private final UpdateConfigurationSet updateConfigurationSet;
        private String userId;

        private APIupdateConfigurationSetRequest(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet) {
            this.type = type;
            this.scope = scope;
            this.code = code;
            this.updateConfigurationSet = updateConfigurationSet;
        }

        /**
         * Set userId
         * @param userId Feature that allows Administrators to administer personal settings (but never reveal the value of secrets) of a specific user. (optional)
         * @return APIupdateConfigurationSetRequest
         */
        public APIupdateConfigurationSetRequest userId(String userId) {
            this.userId = userId;
            return this;
        }

        /**
         * Build call for updateConfigurationSet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateConfigurationSetCall(type, scope, code, updateConfigurationSet, userId, _callback);
        }

        /**
         * Execute updateConfigurationSet request
         * @return ConfigurationSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ConfigurationSet execute() throws ApiException {
            ApiResponse<ConfigurationSet> localVarResp = updateConfigurationSetWithHttpInfo(type, scope, code, updateConfigurationSet, userId);
            return localVarResp.getData();
        }

        /**
         * Execute updateConfigurationSet request. Use any specified configuration options to override any other configuration for this request only.
         * @return ConfigurationSet
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ConfigurationSet execute(ConfigurationOptions opts) throws ApiException {
            ApiResponse<ConfigurationSet> localVarResp = updateConfigurationSetWithHttpInfo(type, scope, code, updateConfigurationSet, userId, opts);
            return localVarResp.getData();
        }

        /**
         * Execute updateConfigurationSet request with HTTP info returned
         * @return ApiResponse&lt;ConfigurationSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConfigurationSet> executeWithHttpInfo() throws ApiException {
            return updateConfigurationSetWithHttpInfo(type, scope, code, updateConfigurationSet, userId);
        }

        /**
         * Execute updateConfigurationSet request with HTTP info returned. Use any specified configuration options to override any other configuration for this request only.
         * @return ApiResponse&lt;ConfigurationSet&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConfigurationSet> executeWithHttpInfo(ConfigurationOptions opts) throws ApiException {
            return updateConfigurationSetWithHttpInfo(type, scope, code, updateConfigurationSet, userId, opts);
        }

        /**
         * Execute updateConfigurationSet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConfigurationSet> _callback) throws ApiException {
            return updateConfigurationSetAsync(type, scope, code, updateConfigurationSet, userId, _callback);
        }

        /**
         * Execute updateConfigurationSet request (asynchronously). Use any specified configuration options to override any other configuration for this request only.
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConfigurationSet> _callback, ConfigurationOptions opts) throws ApiException {
            return updateConfigurationSetAsync(type, scope, code, updateConfigurationSet, userId, _callback, opts);
        }
    }

    /**
     * [EARLY ACCESS] UpdateConfigurationSet: Update the description of a configuration set
     * 
     * @param type Whether the configuration set is Personal or Shared (required)
     * @param scope The scope that identifies a configuration set (required)
     * @param code The code that identifies a configuration set (required)
     * @param updateConfigurationSet The data to update a configuration set (required)
     * @return APIupdateConfigurationSetRequest
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The details of the input related failure </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No configuration set exists with the provided identifiers </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateConfigurationSetRequest updateConfigurationSet(String type, String scope, String code, UpdateConfigurationSet updateConfigurationSet) {
        return new APIupdateConfigurationSetRequest(type, scope, code, updateConfigurationSet);
    }
}
